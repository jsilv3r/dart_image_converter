name: Build and Release

on:
  push:
    branches: ["main"]

jobs:
  check-version:
    uses: ./.github/workflows/check-version.yml

  compile:
    needs: check-version
    if: ${{ needs.check-version.result == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_prefix: linux
            binary_extension: ""
          - os: windows-latest
            binary_prefix: win
            binary_extension: ".exe"
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - id: restore-cache-deps
        name: Restore Cache dependencies
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
          path: ~/.pub-cache

      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Save Cache dependencies
        uses: actions/cache/save@v3
        if: steps.restore-cache-deps.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.restore-cache-deps.outputs.cache-primary-key }}
          path: ~/.pub-cache

      - name: Compile executable
        run: |
          dart compile exe bin/main.dart -o binaries/${{ matrix.binary_prefix }}-v${{ needs.check-version.outputs.version_number }}-x64${{ matrix.binary_extension }}

      - name: Upload compiled files
        if: ${{ job.status == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: compiled-files
          path: binaries/${{ matrix.binary_prefix }}-v${{ needs.check-version.outputs.version_number }}-x64${{ matrix.binary_extension }}
          retention-days: 1

  create-release:
    needs: [check-version, compile]
    runs-on: ubuntu-latest
    if: ${{ needs.compile.result == 'success' }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Remove all binaries
        run: |
          find binaries ! -name '.gitkeep' -type f -exec rm -f {} +

      - name: Download compiled files
        uses: actions/download-artifact@v3
        with:
          name: compiled-files
          path: binaries/

      - name: Make executable binary files
        run: |
          find binaries ! -name '.gitkeep' -type f -exec chmod +x {} +

      - name: Increase version in files
        run: |
          sed -i "s|binaries/linux-[^;]*|binaries/linux-v${{ needs.check-version.outputs.version_number }}-x64|g" run_linux-x64.sh
          sed -i "s|binaries\\\\win-[^\\\\]*-x64.exe|binaries\\\\win-v${{ needs.check-version.outputs.version_number }}-x64.exe|g" run_win-x64.bat

      - name: Create and push branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Upgrade to version v${{ needs.check-version.outputs.version_number }}" -m $'\nskip-checks: true' --cleanup=verbatim
          git push origin HEAD

      - name: Create and publish release
        uses: ncipollo/release-action@v1
        with:
          commit: main
          tag: v${{ needs.check-version.outputs.version_number }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          artifacts: "binaries/**"
