name: Build and Release

on:
  push:
    branches: ["main"]
    paths:
      - "**.dart"
      - "**.so"
      - "**.dll"
      - "pubspec.yaml"
      - "pubspec.lock"
      - ".github/workflows/ci.yml"

env:
  VERSION_NUMBER: 1.2.2

jobs:
  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_prefix: linux
            binary_extension: ""
          - os: windows-latest
            binary_prefix: win
            binary_extension: ".exe"
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - id: restore-cache-deps
        name: Restore Cache dependencies
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
          path: |
            ~/.pub-cache
            .dart-tool

      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        if: steps.restore-cache-deps.outputs.cache-hit != 'true'
        run: dart pub get

      - name: Save Cache dependencies
        uses: actions/cache/save@v3
        if: steps.restore-cache-deps.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.restore-cache-deps.outputs.cache-primary-key }}
          path: |
            ~/.pub-cache
            .dart-tool

      - name: Compile executable
        run: |
          dart compile exe bin/main.dart -o binaries/${{ matrix.binary_prefix }}-v${{ env.VERSION_NUMBER }}-x64${{ matrix.binary_extension }}

      - name: Upload compiled files
        if: ${{ job.status == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: compiled-files
          path: binaries/${{ matrix.binary_prefix }}-v${{ env.VERSION_NUMBER }}-x64${{ matrix.binary_extension }}
          retention-days: 1

  create-release:
    needs: compile
    runs-on: ubuntu-latest
    if: ${{ needs.compile.result == 'success' }}
    steps:
      - uses: actions/checkout@v3

      - name: Remove all binaries
        run: |
          find binaries ! -name '.gitkeep' -type f -exec rm -f {} +

      - name: Download compiled files
        uses: actions/download-artifact@v3
        with:
          name: compiled-files
          path: binaries/

      - name: Make executable binary files
        run: |
          find binaries ! -name '.gitkeep' -type f -exec chmod +x {} +

      - name: Increase version in files
        run: |
          sed -i "s/version:.*/version: ${{ env.VERSION_NUMBER }}/g" pubspec.yaml
          sed -i "s|binaries/linux-[^;]*|binaries/linux-v${{ env.VERSION_NUMBER }}-x64|g" run_linux-x64.sh
          sed -i "s|binaries\\\\win-[^\\\\]*-x64.exe|binaries\\\\win-v${{ env.VERSION_NUMBER }}-x64.exe|g" run_win-x64.bat

      - name: Check if branch exists in remote
        run: |
          if git ls-remote --heads origin v${{ env.VERSION_NUMBER }} | grep -q v${{ env.VERSION_NUMBER }}; then
            echo "Branch v${{ env.VERSION_NUMBER }} already exists in remote repository"
            exit 1
          fi

      - name: Create and push branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b v${{ env.VERSION_NUMBER }}
          git commit -m "Upgrade to version v${{ env.VERSION_NUMBER }}"
          git push origin v${{ env.VERSION_NUMBER }}

      - name: Create and publish release
        uses: ncipollo/release-action@v1
        with:
          commit: v${{ env.VERSION_NUMBER }}
          tag: v${{ env.VERSION_NUMBER }}
