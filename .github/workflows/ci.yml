name: Build and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  VERSION_NUMBER: 1.1.2

jobs:
  test-and-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Analyze project source
        run: dart analyze

      - name: Run tests
        run: dart test

      - name: Clear linux binary folder
        if: matrix.os == 'ubuntu-latest'
        run: |
          find binaries ! -name '.gitkeep' -type f -exec rm -f {} +
      - name: Clear windows binary folder
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path binaries -Recurse -File -Exclude .gitkeep -Force | Remove-Item -Recurse -Force

      - name: Compile linux executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          dart compile exe bin/main.dart -o binaries/linux/v${{ env.VERSION_NUMBER }}-x64
      - name: Compile windows executable
        if: matrix.os == 'windows-latest'
        run: |
          dart compile exe bin/main.dart -o binaries/windows/v${{ env.VERSION_NUMBER }}-x64.exe

      - name: Upload compiled files
        if: ${{ job.status == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: compiled-files
          path: binaries/

  create-release:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: ${{ needs.test-and-build.result == 'success' }}
    steps:
      - uses: actions/checkout@v3

      - name: Remove all binaries
        run: |
          rm -rf binaries

      - name: Download compiled files
        uses: actions/download-artifact@v3
        with:
          name: compiled-files
          path: binaries/

      - name: Make executable binary files
        run: |
          find binaries ! -name '.gitkeep' -type f -exec chmod +x {} +

      - name: Increase version in files
        run: |
          sed -i "s/version:.*/version: ${{ env.VERSION_NUMBER }}/g" pubspec.yaml
          sed -i "s/binaries\/linux\/[^;]*/binaries\/linux\/v${{ env.VERSION_NUMBER }}-x64/g" run_linux-x64.sh
          sed -i 's/binaries\\windows\\[^-]*-x64.exe/binaries\\windows\\v${{ env.VERSION_NUMBER }}-x64.exe/g' run_win-x64.bat

      - name: Add and commit compiled files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add binaries/
          git commit -m "Compiled executable files for version v${{ env.VERSION_NUMBER }}"

      - name: Create and publish release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.ACCESS_TOKEN }}
          automatic_release_tag: v${{ env.VERSION_NUMBER }}
          prerelease: false
          title: Release v${{ env.VERSION_NUMBER }}