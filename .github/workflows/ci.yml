name: Build and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  VERSION: "v1.1.1"

jobs:
  test-and-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-dart-deps
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}

      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Analyze project source
        run: dart analyze

      - name: Run tests
        run: dart test

      - name: Clear binary folders
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            find . ! -name '.gitkeep' -type f -exec rm -f {} +
          elif [ ${{ matrix.os }} == 'windows-latest' ]; then
            for /f "delims=" %i in ('dir /b /a-d /s ^| findstr /v /c:".gitkeep"') do del /f "%i"
          fi

      - name: Compile executable
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            dart compile exe bin/main.dart -o binaries/linux/${{ env.VERSION }}-x64
          elif [ ${{ matrix.os }} == 'windows-latest' ]; then
            dart compile exe bin/main.dart -o binaries/windows/${{ env.VERSION }}-x64.exe
          fi

      - name: Add and commit compiled files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add binaries/
          git commit -m "Compiled executable files for version ${{ env.VERSION }}"
          git tag ${{ env.VERSION }}
          git push origin HEAD --tags

      - name: Create and publish release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.ACCESS_TOKEN }}
          automatic_release_tag: ${{ env.VERSION }}
          prerelease: false
          title: Release ${{ env.VERSION }}
          files: binaries/**